@model RED.Models.ElectronicDiary.Tests.TestW

@{
    ViewBag.Title = "Create";
}

<h2>Създай</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Изследване</h4>
        <hr />
        @foreach (ModelState modelState in ViewData.ModelState.Values)
        {
            foreach (ModelError error in modelState.Errors)
            {
                <div class="alert alert-danger alert-dismissable">
                    <button aria-hidden="true" data-dismiss="alert" class="close" type="button">×</button>
                    @error.ErrorMessage
                </div>
            }
        }
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.TestCategoryId, "Категория", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("TestCategoryId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TestCategoryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TestMethods, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="text" id="methods-box" class="form-control" />
                @Html.ValidationMessageFor(model => model.TestMethods, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10 col-md-offset-2">
                <input type="button" class="btn btn-primary" value="Добави Метод" onclick="addMethod()"/>
                <table id="test-methods-table" class="table table-hover" style="margin-top: 10px; margin-bottom: 0px;">
                   @*HERE BE TEST METHODS*@
                </table>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AcredetationLevelId, "Ниво Акредитация", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("AcredetationLevelId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.AcredetationLevelId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.UnitName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.UnitName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UnitName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Temperature, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Temperature, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Temperature, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="±" class="btn btn-xs btn-info" style="padding:0 22px;" onclick="addSign(this)" for="Temperature" />
                <input type="button" value="°" class="btn btn-xs btn-info" style="padding:0 22px;" onclick="addSign(this)" for="Temperature" />
                <input type="button" value="²" class="btn btn-xs btn-info" style="padding:0 22px;" onclick="addSign(this)" for="Temperature" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TypeId, "Вид", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("TypeId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MethodValue, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MethodValue, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MethodValue, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="±" class="btn btn-xs btn-info" style="padding:0 22px;" onclick="addSign(this)" for="MethodValue" />
                <input type="button" value="°" class="btn btn-xs btn-info" style="padding:0 22px;" onclick="addSign(this)" for="MethodValue" />
                <input type="button" value="²" class="btn btn-xs btn-info" style="padding:0 22px;" onclick="addSign(this)" for="MethodValue" />
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <a href="/Tests/Index" class="btn btn-default">Отказ</a>
                <input type="submit" value="Създай" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<script>
    $(document).ready(function () {
        $('#TypeId').on('change', function () {
            CheckTestTypeAndHandleMethodValue(this);
        });

        CheckTestTypeAndHandleMethodValue($('#TypeId'));
    });

    function CheckTestTypeAndHandleMethodValue(testTypeDropDown) {
        var id = $(testTypeDropDown).val();

        $.ajax({
            url: "/Tests/GetTestTypeFromId",
            type: "GET",
            data: { testId: id },
            success: function (result) {
                if (result == "ФЗХ") {
                    $('#MethodValue').val('');
                    $('#MethodValue').attr('disabled', 'disabled');
                }
                else if (result == "МКБ") {
                    $('#MethodValue').removeAttr('disabled');
                }
            }
        });
    }

    function addMethod() {
        var methodsBox = $('#methods-box');
        var methodText = methodsBox.val();

        if (methodText) {
            methodsBox.val('');

            var method = $('<tr><td>\
                            <input type="hidden" class="testMethod" name="" value="' + methodText + '" />\
                            ' + methodText + '\
                            <i class="fa fa-times pull-right" onclick="removeMethod(this)"></i>\
                        </td></tr>');

            $('#test-methods-table').append(method);
            renumerateMethods();
        }
    }

    function removeMethod(x) {
        var tr = $(x).parent().parent();
        tr.remove();
        renumerateMethods();
    }

    function renumerateMethods() {
        var methods = $('.testMethod');
        var i = 0;
        methods.each(function () {
            $(this).attr("name", "TestMethods[" + i + "].Method");
            i++;
        });
    }
</script>
