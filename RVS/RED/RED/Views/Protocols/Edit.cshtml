@model RED.Models.ElectronicDiary.Protocols.ProtocolW
@using RED.Models.ElectronicDiary
@using System.Collections.Generic

@{
    ViewBag.Title = "Edit";
}

<link href="~/Content/Our/protocols.css" rel="stylesheet" />
<link href="~/Content/plugins/chosen/chosen.css" rel="stylesheet" />
<h2>Промени</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Протокол</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @{
        int i = 1;
        var wrappedDiary = new DiaryW(Model.Request.Diary);
        }

        @foreach (var item in Model.ProtocolResults.OrderBy(x => x.ProductTest.Product.Number).ThenBy(x => x.ProductTest.Test.Name).ThenBy(x => x.ResultNumber))
        {
            <div class="form-group">
                <label class="control-label col-md-3">
                    Наименование на показателя
                </label>
                <label class="col-md-9 modified-label">
                    @item.ProductTest.Test.Name
                </label>
            </div>
            @*<div class="form-group">
                    @Html.Label("unit", "Единица на величината", new { @class = "control-label col-md-2" })
                    <div class="col-md-10">

                    </div>
                </div>*@
            <div class="form-group">
                <label class="control-label col-md-3">
                    Методи
                    <i class="fa fa-question-circle" title="Методи-стандартизирани, валидирани, вътрешно-лабораторни"></i>
                </label>
                <label class="col-md-9 modified-label-notbold">
                    @item.ProductTest.Test.TestMethods
                </label>
            </div>
            <div class="form-group">
                <label for="test-method" class="control-label col-md-3">
                    № на образеца
                    <i class="fa fa-question-circle" title="№ на образеца по входящо-изходящия дневник"></i>
                </label>
                <label class="col-md-9 modified-label">
                    @item.ResultNumber
                    <input type="hidden" name="ProtocolResults[@(i - 1)].ResultNumber" value="@item.ResultNumber">
                </label>
            </div>
            <div class="form-group">
                <label for="ProtocolResults[@(i - 1)].Results" class="control-label col-md-3">
                    Резултати от изследването, неопределеност
                </label>
                <div class="col-md-9">
                    @Html.TextArea("ProtocolResults[" + (i - 1) + "].Results", item.Results, new { @class = "form-control tarea", data_val = "true", data_val_required = "Резултатът е задължителен!" })
                    <span class="special-chars-holder">
                        <input type="button" value="±" class="btn btn-xs btn-info" onclick="addPlusMinus(this)" tabindex="-1" />
                        <input type="button" value="°" class="btn btn-xs btn-info" onclick="addDegrees(this)" tabindex="-1" />
                    </span>
                    @Html.ValidationMessage("ProtocolResults[" + (i - 1) + "].Results", new { @class = "text-danger" })
                </div>
            </div>
            @*<div class="form-group">
                <label for="ProtocolResults[@(i - 1)].MethodValue" class="control-label col-md-3">
                    Стойност на показателя
                    <i class="fa fa-question-circle" title="Стойност и допуск на показателя по метода"></i>
                </label>
                <div class="col-md-9">
                    @Html.TextArea("ProtocolResults[" + (i - 1) + "].MethodValue", item.MethodValue, new { @class = "form-control tarea", data_val = "true", data_val_required = "Стойността е задължителна!" })
                    <span class="special-chars-holder">
                        <input type="button" value="±" class="btn btn-xs btn-info" onclick="addPlusMinus(this)" tabindex="-1" />
                        <input type="button" value="°" class="btn btn-xs btn-info" onclick="addDegrees(this)" tabindex="-1" />
                    </span>
                    @Html.ValidationMessage("ProtocolResults[" + (i - 1) + "].MethodValue", new { @class = "text-danger" })
                </div>
            </div>*@
            <div class="form-group">
                <label for="test-method" class="control-label col-md-3">
                    Условия на заобикалящата среда
                </label>
                <label class="col-md-9 modified-label-notbold">
                    @item.ProductTest.Test.Temperature
                </label>
            </div>

            <input type="hidden" name="ProtocolResults[@(i - 1)].Id" value="@item.Id" />
            <input type="hidden" name="ProtocolResults[@(i - 1)].ProductTestId" value="@item.ProductTest.Id" />
            <input type="hidden" name="ProtocolResults[@(i - 1)].ProtocolId" value="@item.ProtocolId" />
            <hr />
            i++;
        }

        <div class="form-group">
            <label for="Tester" class="control-label col-md-3">
                Ивършил изпитването:
            </label>
            <div class="col-md-9">
                @Html.TextBoxFor(m => m.Tester, new { @class = "form-control text-box single-line", data_val = "true", data_val_required = "Извършил изпитването е задължително поле!" })
                @Html.ValidationMessageFor(m => m.Tester, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label for="Tester" class="control-label col-md-3">
                Ръководител:
            </label>
            <div class="col-md-9">
                @Html.TextBoxFor(m => m.LabLeader, new { @class = "form-control text-box single-line", data_val = "true", data_val_required = "Ръководител е задължително поле!" })
                @Html.ValidationMessageFor(m => m.LabLeader, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (Model.ProtocolResults.Any(pr => pr.ProductTest.Test.AcredetationLevel.Level.Trim() == AcredetationLevels.Acredited))
        {
            <div class="form-group">
                <label for="RemarkId" class="control-label col-md-3">
                    Забележка (A):
                </label>
                <div class="col-md-9">
                    @Html.DropDownList("RemarkId", null, htmlAttributes: new { @class = "form-control chosen-select a-remarksDd" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-3 col-md-9">
                    <input type="button" value="Добави" class="add-a-remark-btn btn btn-primary" tabindex="5" />
                    <table class="table table-hover remarks-a-list-table" style="margin-top:23px;">
                        <tbody>
                            @{ 
                                int r = 0;
                            }
                            @foreach (var pRemark in Model.ProtocolsRemarksA.OrderBy(rem => rem.Number))
                            {
                                <tr>
                                    <td class="col-xs-1"><span class="label label-primary">Добавен</span></td>
                                    <td class="issue-info remark a-remark">
                                        @pRemark.Remark.Text
                                        <input class="remarkId" type="hidden" value="@pRemark.RemarkId" name="ProtocolsRemarksA[@r].RemarkId">
                                        <input class="remarkProtocolId" type="hidden" value="@pRemark.ProtocolId" name="ProtocolsRemarksA[@r].ProtocolId">
                                        <input class="remarkRowId" type="hidden" value="@pRemark.Id" name="ProtocolsRemarksA[@r].Id">
                                        <input class="remarkNumber" type="hidden" value="@pRemark.Number" name="ProtocolsRemarksA[@r].Number">
                                    </td>
                                    <td class="col-xs-1">
                                        <a class="delete-remark" onclick="deleteRemarkA(this)"><h3 style="margin: 0px">x</h3></a>
                                    </td>
                                </tr>
                                r++;
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        
        @if (Model.ProtocolResults.Any(pr => pr.ProductTest.Test.AcredetationLevel.Level.Trim() == AcredetationLevels.NotAcredited))
        {
            <div class="form-group">
                <label for="RemarkId" class="control-label col-md-3">
                    Забележка (B):
                </label>
                <div class="col-md-9">
                    @Html.DropDownList("RemarkId", null, htmlAttributes: new { @class = "form-control chosen-select b-remarksDd" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-3 col-md-9">
                    <input type="button" value="Добави" class="add-b-remark-btn btn btn-primary" tabindex="5" />
                    <table class="table table-hover remarks-b-list-table" style="margin-top:23px;">
                        <tbody>
                            @{
                                int r = 0;
                            }
                            @foreach (var pRemark in Model.ProtocolsRemarksB.OrderBy(rem => rem.Number))
                            {
                                <tr>
                                    <td class="col-xs-1"><span class="label label-primary">Добавен</span></td>
                                    <td class="issue-info remark b-remark">
                                        @pRemark.Remark.Text
                                        <input class="remarkId" type="hidden" value="@pRemark.RemarkId" name="ProtocolsRemarksB[@r].RemarkId">
                                        <input class="remarkProtocolId" type="hidden" value="@pRemark.ProtocolId" name="ProtocolsRemarksB[@r].ProtocolId">
                                        <input class="remarkRowId" type="hidden" value="@pRemark.Id" name="ProtocolsRemarksB[@r].Id">
                                        <input class="remarkNumber" type="hidden" value="@pRemark.Number" name="ProtocolsRemarksB[@r].Number">
                                    </td>
                                    <td class="col-xs-1">
                                        <a class="delete-remark" onclick="deleteRemarkB(this)"><h3 style="margin: 0px">x</h3></a>
                                    </td>
                                </tr>
                                r++;
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }

        <div class="form-group" style="margin-bottom: 60px;">
            <div class="col-md-offset-3 col-md-9">
                <input type="submit" value="Запази" class="btn btn-primary" />
                @Html.ActionLink("Отказ", "Index", "Protocols", null, new { @class = "btn btn-default" })
            </div>
        </div>

        <input id="protocolId" type="hidden" name="Id" value="@Model.Id" />
        <input type="hidden" name="RequestId" value="@Model.Request.Id" />

    </div>
}

<script src="~/Scripts/Our/Helpers.js"></script>
<script src="~/Scripts/plugins/chosen/chosen.jquery.js"></script>
<script src="~/Scripts/Our/Protocols.js"></script>

<script>
    var config = {
        '.chosen-select': {},
        '.chosen-select-deselect': { allow_single_deselect: true },
        '.chosen-select-no-single': { disable_search_threshold: 10 },
        '.chosen-select-no-results': { no_results_text: 'Oops, nothing found!' },
        '.chosen-select-width': { width: "95%" }
    }

    for (var selector in config) {
        $(selector).chosen(config[selector]);
    }

    function addPlusMinus(item) {
        var textArea = $(item).parent().parent().find('textarea');
        var value = textArea.val();
        value += "±";
        textArea.val(value);
    }

    function addDegrees(item) {
        var textArea = $(item).parent().parent().find('textarea');
        var value = textArea.val();
        value += "°";
        textArea.val(value);
    }
</script>